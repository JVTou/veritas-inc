---
import MainLayout from "../layouts/MainLayout.astro";
---

<MainLayout
  title="Veritas Managed Solutions, inc."
  seoTitle="Veritas Managed Solutions, inc."
  seoDescription="Cabling and installation of low voltage systems, wireless, security, AV, electrical"
>
  <div class="hero min-w-screen min-h-screen">
    <video
      autoplay
      loop
      muted
      playsinline
      class="absolute -z-10 object-cover min-w-full min-h-full opacity-80"
      id="BGvideo"
      src="/assets/background/networkbg.mp4"
    >
      Your browser does not support the video tag.
    </video>
    <div class="hero-overlay bg-transparent"></div>
    <div class="hero-content text-center text-neutral-content">
      <div class="max-w-md">
        <h1
          class="mb-5 h-[130px] overflow-hidden text-6xl pointer-events-none"
          id="scramble"
        >
          Veritas Managed Solutions, inc.
        </h1>
        <button class="btn btn-primary">Learn More</button>
        <button class="btn btn-outline">Contact Us</button>
      </div>
    </div>
  </div>

  <script>
    // ——————————————————————————————————————————————————
    // TextScramble
    // ——————————————————————————————————————————————————

    class TextScramble {
      constructor(el) {
        this.el = el;
        this.chars = "!<>-_\\/[]{}—=+*^?#________";
        this.update = this.update.bind(this);
      }
      setText(newText) {
        const oldText = this.el.innerText;
        const length = Math.max(oldText.length, newText.length);
        const promise = new Promise((resolve) => (this.resolve = resolve));
        this.queue = [];
        for (let i = 0; i < length; i++) {
          const from = oldText[i] || "";
          const to = newText[i] || "";
          const start = Math.floor(Math.random() * 40);
          const end = start + Math.floor(Math.random() * 40);
          this.queue.push({ from, to, start, end });
        }
        cancelAnimationFrame(this.frameRequest);
        this.frame = 0;
        this.update();
        return promise;
      }
      update() {
        let output = "";
        let complete = 0;
        for (let i = 0, n = this.queue.length; i < n; i++) {
          let { from, to, start, end, char } = this.queue[i];
          if (this.frame >= end) {
            complete++;
            output += to;
          } else if (this.frame >= start) {
            if (!char || Math.random() < 0.28) {
              char = this.randomChar();
              this.queue[i].char = char;
            }
            output += `<span class="dud">${char}</span>`;
          } else {
            output += from;
          }
        }
        this.el.innerHTML = output;
        if (complete === this.queue.length) {
          this.resolve();
        } else {
          this.frameRequest = requestAnimationFrame(this.update);
          this.frame++;
        }
      }
      randomChar() {
        return this.chars[Math.floor(Math.random() * this.chars.length)];
      }
    }

    // ——————————————————————————————————————————————————
    // Phrases
    // ——————————————————————————————————————————————————

    const phrases = [
      "Low Voltage Systems",
      "Data Cabling",
      "AV Rooms",
      "Electrical",
      "Server Racks",
      "Security Systems",
      "Wireless",
    ];

    const el = document.querySelector("#scramble");
    const fx = new TextScramble(el);

    let counter = 0;
    const next = () => {
      fx.setText(phrases[counter]).then(() => {
        setTimeout(next, 1500);
      });
      counter = (counter + 1) % phrases.length;
    };

    next();
  </script>

  <script>
    let vid = document.getElementById("BGvideo");
    vid.playbackRate = 0.2;
  </script>

  <style>
    #scramble {
      font-family: "Roboto Mono", ui-monospace;
    }
  </style>
</MainLayout>
